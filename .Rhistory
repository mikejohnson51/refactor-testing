single_levelpaths(min_area = 3, min_length = 1000)
network_list %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000)
network_list = list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments"))
network_list %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000)
network_list %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000)
source("~/github/refactor-testing/workspace/R/utils.R")
network_list = network_list %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
mapview()
network_list = list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments"))
network_list = network_list %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
mapview()
network_list = network_list %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000)
cat = network_list$catchments %>%
mutate(areasqkm = add_area(.))
fl  = network_list$flowpaths %>%
mutate(lengthkm = add_length(.), areasqkm = NULL) %>%
left_join(st_drop_geometry(cat), by = "ID")
net_nodes  = fl %>%
group_by(levelpath) %>%
mutate(n = n()) %>%
filter(n == 1) %>%
filter(lengthkm < (min_length /1000) | areasqkm < min_area) %>%
ungroup()
imap = st_intersects(net_nodes, fl)
int_map_p = data.frame(
nodeID = rep(net_nodes$ID, times = lengths(imap)),
nodeLENGTH = rep(net_nodes$lengthkm, times = lengths(imap)),
nodeAREA   = rep(net_nodes$areasqkm, times = lengths(imap)),
intID  = fl$ID[unlist(imap)],
intHS  = fl$hydroseq[unlist(imap)]
)  %>%
filter(nodeID != intID) %>%
group_by(nodeID) %>%
slice_min(intHS) %>%
ungroup() %>%
filter() %>%
filter(!nodeID %in% intID) %>%
select(nodeID, intID) %>%
filter(!duplicated(.)) %>%
group_by(intID) %>%
mutate(g = cur_group_id()) %>%
ungroup() %>%
tidyr::pivot_longer(-g, values_to = 'ID') %>%
filter(!duplicated(.))
meta = filter(int_map_p, name == "intID")
tmp_cat = st_as_sf(left_join(int_map_p, cat, by = 'ID'))
c  = spCatMerge(tmp_cat, "g")
cc = left_join(c, meta, by = "g")
tmp_cat
tmp_cat
cat = network_list$catchments %>%
mutate(areasqkm = add_area(.))
fl  = network_list$flowpaths %>%
mutate(lengthkm = add_length(.), areasqkm = NULL) %>%
left_join(st_drop_geometry(cat), by = "ID")
net_nodes  = fl %>%
group_by(levelpath) %>%
mutate(n = n()) %>%
filter(n == 1) %>%
filter(lengthkm < (min_length /1000) | areasqkm < min_area) %>%
ungroup()
imap = st_intersects(net_nodes, fl)
int_map_p = data.frame(
nodeID = rep(net_nodes$ID, times = lengths(imap)),
nodeLENGTH = rep(net_nodes$lengthkm, times = lengths(imap)),
nodeAREA   = rep(net_nodes$areasqkm, times = lengths(imap)),
intID  = fl$ID[unlist(imap)],
intHS  = fl$hydroseq[unlist(imap)]
)  %>%
filter(nodeID != intID) %>%
group_by(nodeID) %>%
slice_min(intHS) %>%
ungroup() %>%
filter() %>%
filter(!nodeID %in% intID) %>%
select(nodeID, intID) %>%
filter(!duplicated(.)) %>%
group_by(intID) %>%
mutate(g = cur_group_id()) %>%
ungroup() %>%
tidyr::pivot_longer(-g, values_to = 'ID') %>%
filter(!duplicated(.))
meta = filter(int_map_p, name == "intID")
int_map_p
int_map_p
imap
single_levelpaths = function(network_list,
min_area   = 3,
min_length = .6){
cat = network_list$catchments %>%
mutate(areasqkm = add_area(.))
fl  = network_list$flowpaths %>%
mutate(lengthkm = add_length(.), areasqkm = NULL) %>%
left_join(st_drop_geometry(cat), by = "ID")
net_nodes  = fl %>%
group_by(levelpath) %>%
mutate(n = n()) %>%
filter(n == 1) %>%
filter(lengthkm < (min_length /1000) | areasqkm < min_area) %>%
ungroup()
imap = st_intersects(net_nodes, fl)
int_map_p = data.frame(
nodeID = rep(net_nodes$ID, times = lengths(imap)),
nodeLENGTH = rep(net_nodes$lengthkm, times = lengths(imap)),
nodeAREA   = rep(net_nodes$areasqkm, times = lengths(imap)),
intID  = fl$ID[unlist(imap)],
intHS  = fl$hydroseq[unlist(imap)]
)  %>%
filter(nodeID != intID) %>%
group_by(nodeID) %>%
slice_min(intHS) %>%
ungroup() %>%
filter() %>%
filter(!nodeID %in% intID) %>%
select(nodeID, intID) %>%
filter(!duplicated(.)) %>%
group_by(intID) %>%
mutate(g = cur_group_id()) %>%
ungroup() %>%
tidyr::pivot_longer(-g, values_to = 'ID') %>%
filter(!duplicated(.))
if(nrow(int_map_p) > 0){
meta = filter(int_map_p, name == "intID")
tmp_cat = st_as_sf(left_join(int_map_p, cat, by = 'ID'))
c  = spCatMerge(tmp_cat, "g")
cc = left_join(c, meta, by = "g")
rm = filter(int_map_p, name == "nodeID")$ID
cat2 = cat %>%
filter(!ID %in% int_map_p$ID) %>%
bind_rows(cc) %>%
select(ID, areasqkm)
fl2 = filter(fl, !ID %in% filter(int_map_p, name == "nodeID")$ID)
remove_islands(list(flowpaths = fl2, catchments = cat2))
} else {
network_list
}
}
network_list = list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments"))
network_list = network_list %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
mapview()
i = 50
path = base_files[i]
outfile  = gsub("base-runs", "refactored", gsub(".gpkg", "_refactored_s10000_m1000_c1000.gpkg", path))
refactor_wrapper(flowpaths                   = sf::read_sf(path, "flowpaths"),
split_flines_meters         = 10000,
collapse_flines_meters      = 1000,
collapse_flines_main_meters = 1000,
cores                       = 1,
facfdr                      = '/Volumes/Transcend/ngen/refactor-tests/base-data/fdrfac',
outfile                     = outfile)
path = outfile
network_list = list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments"))
network_list = network_list %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
mapview()
list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments")) %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000)
source("~/github/refactor-testing/workspace/R/utils.R")
network_list = list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments")) %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
mapview()
list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments")) %>%
merge_along_levelpath(10)
list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments")) %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000)
network_list = list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments")) %>%
merge_along_levelpath(10)
cat = network_list$catchments %>%
mutate(areasqkm = add_area(.))
fl  = network_list$flowpaths %>%
mutate(lengthkm = add_length(.), areasqkm = NULL) %>%
left_join(st_drop_geometry(cat), by = "ID")
network  = fl %>%
st_drop_geometry() %>%
group_by(levelpath) %>%
mutate(toID   = lead(ID),
fromID = lag(ID),
flag = lengthkm < (min_length /1000) | areasqkm < min_area) %>%
ungroup()
# Those that are flagged and not an outlet
# These will all be merged down the network
mid_reach = network %>%
filter(flag & !is.na(toID)) %>%
select(ID, into = toID)
# Outlet reaches that are flagged
# These will all be merged up the network
outlet = filter(network, is.na(toID) & flag) %>%
select(ID, into = fromID) %>%
filter(!is.na(into))
# Identities to merge
gg = bind_rows(mid_reach, outlet) %>%
group_by(into) %>%
mutate(g = cur_group_id()) %>%
ungroup() %>%
tidyr::pivot_longer(-g) %>%
select(ID = value, direction = name, g)
tmp = st_as_sf(left_join(gg, fl, by = 'ID'))
meta = tmp %>%
st_drop_geometry() %>%
group_by(g) %>%
arrange(direction) %>%
summarize(
ID = last(ID),
levelpath = unique(levelpath),
hydroseq  = last(hydroseq),
comids    = paste(comids, collapse = ",")
) %>%
ungroup()
tmp = select(left_join(spLineMerge(tmp, "g"), meta, by = 'g'), -g)
meta
tmp
tmp = st_as_sf(left_join(gg, fl, by = 'ID'))
tmp = st_as_sf(left_join(gg, fl, by = 'ID'))
if(nrow(tmp) > 0){
meta = tmp %>%
st_drop_geometry() %>%
group_by(g) %>%
arrange(direction) %>%
summarize(
ID = last(ID),
levelpath = unique(levelpath),
hydroseq  = last(hydroseq),
comids    = paste(comids, collapse = ",")
) %>%
ungroup()
tmp = select(left_join(spLineMerge(tmp, "g"), meta, by = 'g'), -g)
}
new_fl = fl %>%
filter(!ID %in% gg$ID) %>%
bind_rows(tmp)
gaps = filter(new_fl, st_geometry_type(new_fl) == "MULTILINESTRING")
if(nrow(gaps) > 0){
new_geom = lapply(1:nrow(gaps), function(x) {
st_cast(st_line_merge(st_union(st_cast(
st_cast(gaps$geometry[x], "LINESTRING"), "MULTILINESTRING"
))), "LINESTRING")
})
st_geometry(gaps) =  do.call('c', new_geom)
new_fl = filter(new_fl, !ID %in% gaps$ID) %>%
bind_rows(gaps)
}
tmp_cat = st_as_sf(left_join(gg, cat, by = 'ID'))
tmp_cat = select(left_join(spCatMerge(tmp_cat, "g"), select(meta, g, ID), by = 'g'), -g)
tmp_cat
if(nrow(temp_cat) > 0){
tmp_cat = select(left_join(spCatMerge(tmp_cat, "g"), select(meta, g, ID), by = 'g'), -g)
}
new_cat = cat %>%
filter(!ID %in% gg$ID) %>%
bind_rows(tmp_cat)
if(nrow(tmp_cat) > 0){
tmp_cat = select(left_join(spCatMerge(tmp_cat, "g"), select(meta, g, ID), by = 'g'), -g)
}
new_cat = cat %>%
filter(!ID %in% gg$ID) %>%
bind_rows(tmp_cat)
dups = new_cat$ID[duplicated(new_cat$ID)]
if(length(dups) > 0){
new_cat$tmpID = 1:nrow(new_cat)
message("Cleaning up ", length(dups), " duplicated catchment fragments")
for(i in 1:length(dups)){
here = filter(new_cat, ID == dups[i])
tmap = st_intersects(here, filter(new_fl, ID == dups[i]))
dissolve = here[lengths(tmap) == 0, ]
if(nrow(dissolve)  == 0){
here$areasqkm = add_area(here)
dissolve = slice_min(here, areasqkm, n = 1)
}
opt = suppressWarnings({
st_intersection(dissolve, new_cat) %>%
st_collection_extract("LINESTRING") %>%
mutate(l = st_length(.)) %>%
slice_max(l, with_ties = FALSE)
})
ind = which(new_cat$tmpID == opt$tmpID.1)
new_cat$geometry[ind] = st_union(dissolve$geometry, new_cat$geometry[ind])
new_cat = filter(new_cat, tmpID != dissolve$tmpID)
}
}
remove_islands(network_list = list(flowpaths  = select(new_fl, flowpath_names),
catchments = select(new_cat, catchment_names)))
source("~/github/refactor-testing/workspace/R/utils.R")
network_list = list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments")) %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
mapview()
network_list
read_sf(path, "flowpaths")
# merge_along_levelpath(10) %>%
# mainstem_reduce(min_area = 3,  min_length = 1000) %>%
# single_levelpaths(min_area = 3, min_length = 1000) %>%
# single_levelpaths(min_area = 3, min_length = 1000) %>%
network_list
network_list = list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments")) %>%
# merge_along_levelpath(10) %>%
# mainstem_reduce(min_area = 3,  min_length = 1000) %>%
# single_levelpaths(min_area = 3, min_length = 1000) %>%
# single_levelpaths(min_area = 3, min_length = 1000) %>%
mapview()
network_list
network_list = list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments")) %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area   = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
mapview()
i = 400
path = base_files[i]
outfile  = gsub("base-runs", "refactored", gsub(".gpkg", "_refactored_s10000_m1000_c1000.gpkg", path))
refactor_wrapper(flowpaths                   = sf::read_sf(path, "flowpaths"),
split_flines_meters         = 10000,
collapse_flines_meters      = 1000,
collapse_flines_main_meters = 1000,
cores                       = 1,
facfdr                      = '/Volumes/Transcend/ngen/refactor-tests/base-data/fdrfac',
outfile                     = outfile)
path = outfile
network_list = list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments")) %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area   = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
mapview()
write_sf(out$flowpaths, out_gpkg, "flowpaths")
network_list
list(flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID,
hydroseq = Hydroseq, member_COMID),
catchments = read_sf(path, "catchments")) %>%
merge_along_levelpath(10) %>%
mainstem_reduce(min_area   = 3,  min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000) %>%
single_levelpaths(min_area = 3, min_length = 1000)
refactor_wrapper
flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID, hydroseq = Hydroseq, member_COMID)
catchments = read_sf(path, "catchments")
gsub("refactored", 'aggregated', outfile)
out = list(flowpaths = flowpaths, catchments = catchments) %>%
merge_along_levelpath(ideal_size) %>%
mainstem_reduce(min_area   = min_area,  min_length = min_length) %>%
single_levelpaths(min_area = min_area, min_length = min_length) %>%
single_levelpaths(min_area = min_area, min_length = min_length) %>%
single_levelpaths(min_area = min_area, min_length = min_length)
out
outfile
write_sf(out$flowpaths,  outfile, "flowpaths",   overwrite = TRUE)
write_sf(out$catchments, outfile, "catchments", overwrite = TRUE)
outfile    = gsub("refactored", 'aggregated', outfile)
write_sf(out$flowpaths,  outfile, "flowpaths",   overwrite = TRUE)
write_sf(out$flowpaths,  outfile, "flowpaths",   overwrite = TRUE)
write_sf(out$catchments, outfile, "catchments", overwrite = TRUE)
outfile
path
base_files = list.files('/Volumes/Transcend/ngen/refactor-tests/CAMELS/base-runs/', full.names = TRUE)
path = base_files[i]
outfile
refactor_wrapper(flowpaths                   = sf::read_sf(path, "flowpaths"),
split_flines_meters         = 10000,
collapse_flines_meters      = 1000,
collapse_flines_main_meters = 1000,
cores                       = 1,
facfdr                      = '/Volumes/Transcend/ngen/refactor-tests/base-data/fdrfac',
outfile                     = outfile)
flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID, hydroseq = Hydroseq, member_COMID)
path
flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID, hydroseq = Hydroseq, member_COMID)
i
path = base_files[i]
outfile  = gsub("base-runs", "refactored", gsub(".gpkg", "_refactored_s10000_m1000_c1000.gpkg", path))
path = outfile
flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID, hydroseq = Hydroseq, member_COMID)
read_sf(path, "flowpaths")
path = base_files[i]
outfile  = gsub("base-runs", "refactored", gsub(".gpkg", "_refactored_s10000_m1000_c1000.gpkg", path))
refactor_wrapper(flowpaths                   = read_sf(path, "flowpaths"),
split_flines_meters         = 10000,
collapse_flines_meters      = 1000,
collapse_flines_main_meters = 1000,
cores                       = 1,
facfdr                      = '/Volumes/Transcend/ngen/refactor-tests/base-data/fdrfac',
outfile                     = outfile)
path = outfile
flowpaths = read_sf(path, "flowpaths") %>%
select(ID, toID, lengthkm = LENGTHKM, totdasqkm = TotDASqKM, levelpath = LevelPathID, hydroseq = Hydroseq, member_COMID)
flowpaths
catchments = read_sf(path, "catchments")
outfile    = gsub("refactored", 'aggregated', outfile)
outfile
outfile
mapview(flowpaths) + catchments
ideal_size
out = list(flowpaths = flowpaths, catchments = catchments) %>%
merge_along_levelpath(ideal_size)
mapview(out)
out = list(flowpaths = flowpaths, catchments = catchments) %>%
merge_along_levelpath(ideal_size) %>%
mainstem_reduce(min_area   = min_area,  min_length = min_length)
mapview(out)
build_int_map = function(fl){
net_nodes  = fl %>%
group_by(levelpath) %>%
mutate(n = n()) %>%
filter(n == 1) %>%
filter(lengthkm < (min_length /1000) | areasqkm < min_area) %>%
ungroup()
imap = st_intersects(net_nodes, fl)
data.frame(
nodeID = rep(net_nodes$ID, times = lengths(imap)),
nodeLENGTH = rep(net_nodes$lengthkm, times = lengths(imap)),
nodeAREA   = rep(net_nodes$areasqkm, times = lengths(imap)),
intID  = fl$ID[unlist(imap)],
intHS  = fl$hydroseq[unlist(imap)])  %>%
filter(nodeID != intID) %>%
group_by(nodeID) %>%
slice_min(intHS) %>%
ungroup() %>%
filter() %>%
filter(!nodeID %in% intID) %>%
select(nodeID, intID) %>%
filter(!duplicated(.)) %>%
group_by(intID) %>%
mutate(g = cur_group_id()) %>%
ungroup() %>%
tidyr::pivot_longer(-g, values_to = 'ID') %>%
filter(!duplicated(.))
}
fl
build_int_map(fl)
mapview(fl)
source("~/github/refactor-testing/workspace/R/utils.R")
